#line 2 "input_lexer.cc"

#line 4 "input_lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
#include <debug.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE giac_yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via giac_yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void giac_yyrestart (FILE *input_file ,yyscan_t yyscanner );
void giac_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE giac_yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void giac_yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void giac_yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void giac_yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void giac_yypop_buffer_state (yyscan_t yyscanner );

static void giac_yyensure_buffer_stack (yyscan_t yyscanner );
static void giac_yy_load_buffer_state (yyscan_t yyscanner );
static void giac_yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER giac_yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE giac_yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE giac_yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE giac_yy_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *giac_yyalloc (yy_size_t ,yyscan_t yyscanner );
void *giac_yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void giac_yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer giac_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        giac_yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        giac_yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define giac_yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yynoreturn yy_fatal_error (yyconst char* msg ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 272
#define YY_END_OF_BUFFER 273
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[739] =
    {   0,
        0,    0,   23,   23,    0,    0,    0,    0,    0,    0,
      273,  271,    1,    2,  146,    3,  269,  126,  187,  158,
       30,   87,   88,  168,  148,   85,  164,  171,  176,  242,
      242,   33,   31,   79,  124,   80,   29,  136,  267,  267,
      209,   41,  267,  267,   89,   90,  191,   16,  267,  267,
      267,  267,  210,  267,  267,  267,   37,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      108,  139,  109,  159,   40,  267,  267,  267,  267,  267,
      267,  267,  267,   23,   25,   24,  272,  270,  272,   15,
        6,    5,  272,   18,   17,   19,    1,  120,    0,    0,

        0,    0,    0,    0,    0,    0,  127,  188,  178,  125,
      268,   92,   93,    0,  110,  111,  138,  172,  181,  173,
        0,    0,    0,    0,  193,  169,  149,  150,   86,   91,
      154,    0,  155,  116,  174,  157,  166,  144,  186,  263,
      194,  177,   22,    0,  184,  107,  261,  242,  243,    0,
        0,    0,    0,    0,    0,   35,   34,  128,   81,  122,
      121,  133,  134,  117,  132,  123,   82,  135,  137,  267,
      267,  267,   45,   44,  267,  192,  183,  267,  267,  267,
      267,  207,  267,  267,  267,  267,  267,  233,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,   58,  215,

      267,  267,  267,  267,  267,  267,  267,  267,  267,   48,
      221,  141,   42,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  106,  182,  140,   32,  162,  267,   54,   38,   36,
       43,  267,  267,  267,  267,  267,  237,  235,  236,  161,
      267,   23,   24,   24,   26,    0,  270,   15,    4,   14,
        7,    8,   12,   13,    9,   11,   10,   18,    0,    0,
      253,  254,  252,  256,  255,  257,  189,  100,  101,   94,
       95,  112,  113,  180,  268,   98,   99,  175,  163,  167,
        0,  152,  119,  145,  264,    0,  179,    0,   21,  261,

      262,    0,    0,    0,  265,    0,  259,  258,  260,  244,
        0,   83,  118,   84,  147,  267,  267,  267,  142,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  214,  267,  267,  267,   49,
      267,  267,  267,  217,  267,  267,  190,  220,  218,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  143,  267,  211,  131,  241,  165,  160,  239,
      238,  240,  130,  129,   39,    7,    8,    0,    0,    0,
        0,    0,  102,  103,   96,   97,  114,  115,    0,    0,

        0,  263,    0,  262,    0,    0,    0,  261,    0,    0,
      266,    0,  245,    0,   20,  267,  231,  267,  267,  267,
      267,  267,  208,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  216,  267,  267,  267,
       55,  267,  267,  267,    0,  267,  267,   66,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  229,
      267,   56,   57,  230,  267,  267,  267,  267,  267,  267,
        7,    0,    0,  104,  105,    0,    0,  264,    0,    0,
        0,  261,    0,    0,  262,    0,    0,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  212,  213,  267,

      267,  267,  267,  234,  267,  267,  267,  267,  267,  267,
       63,   60,   59,   73,  267,  267,    0,  267,  267,  267,
      267,  267,  267,  224,  267,  267,  267,  267,  267,   76,
      267,  267,  267,   53,  267,  267,  232,  267,   27,   28,
      206,    0,  262,    0,    0,  195,  267,  267,  267,  267,
      267,  267,   69,  267,  267,  267,  267,  267,  267,  267,
      267,   62,  267,  267,  267,  267,  267,  219,  223,  267,
       67,   71,  267,  267,  267,  225,  267,  267,  227,  267,
      267,   68,  267,  267,   77,   78,  246,  267,  267,  267,
       72,  267,  267,  267,  203,  267,  267,  267,  267,  222,

       74,  267,  267,  267,   65,  267,  267,  267,  267,  267,
      228,  267,  267,  267,  267,   64,  247,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,   47,  267,
      267,   51,  267,  267,  205,  226,  267,  267,  267,    0,
        0,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,   70,  267,   52,   75,  267,   61,  267,  267,
      250,    0,  267,  267,  267,  267,  267,  267,  156,  267,
      267,  267,  267,  267,  267,  267,  267,    0,  248,  267,
      267,  198,  151,  267,  267,  267,  267,  267,   46,  201,
      267,  267,  267,    0,  249,  267,  197,  200,  267,  267,

      267,  267,  267,  267,   50,  251,  267,  267,  267,  267,
      267,  204,  267,  267,  267,  185,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      202,  267,  170,  196,  199,  267,  153,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   32,   33,   34,   32,
       35,   35,   36,   35,   35,   35,   35,   35,   35,   37,
       38,   39,   40,   35,   35,   41,   35,   35,   35,   35,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   35,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   35,   72,   73,   74,   75,    1,   76,   35,   35,
       77,   78,   35,   79,   35,   80,   81,   35,   35,   35,
       35,   35,   82,   35,   35,   83,   35,   35,   35,   84,
       35,   35,   35,   85,   35,   35,   35,   35,   35,   86,
       87,   88,   35,   89,   90,   91,   92,   35,   35,   35,
       35,   35,   35,   35,   93,   94,   35,   95,   96,   35,
       35,   97,   35,   98,   99,  100,  101,  102,   35,   35,
      103,   35,   35,  104,  105,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,  106,  107,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,  108,   35,   35,  109,  110,
       35,   35,   35,   35,   35,   35,   35,    1,  111,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,    1
    } ;

static yyconst YY_CHAR yy_meta[112] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    4,    4,    1,
        1,    1,    1,    5,    1,    1,    1,    1,    4,    6,
        6,    6,    6,    1,    1,    1,    4,    1,    6,    1,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    4,    3,    4,    1,    7,    8,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    4,    1,    4,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7
    } ;

static yyconst flex_uint16_t yy_base[756] =
    {   0,
        0,    0,  109,  110,  111,  112,  113,  114,  115,  118,
     1298, 1299,  125, 1299, 1270, 1299,  154, 1299,  136,  121,
      119, 1299, 1299,  114,  115,  106,  132,  175,  200,  208,
      218,  113, 1299,  126,  190,  119, 1299,  223, 1236,    0,
     1239,    0,  125, 1263, 1299, 1299,  156, 1299,  196, 1235,
       97,  123,  217,  173, 1228, 1243,  206, 1238,  194,  216,
      139,  171,  227,  238,  247, 1222, 1228, 1235, 1231, 1224,
     1265,  195, 1299, 1299,    0,  181,  201,  200, 1207,  227,
     1244,  214, 1205,    0, 1299,  282, 1277, 1299, 1299,    0,
     1299, 1273,  297,    0, 1299, 1299,  319, 1299, 1263, 1260,

      320,  356,  392,  428,  191,  464, 1299,  322, 1249, 1299,
        0, 1299, 1299,  160, 1299, 1299, 1299, 1299, 1299, 1299,
     1264, 1263, 1262, 1208, 1244, 1299, 1299, 1299, 1299, 1299,
     1299, 1253, 1299, 1299, 1299, 1299, 1299, 1251, 1299,  304,
     1299, 1241, 1299, 1264, 1299, 1299,  470,  503,  215,  412,
      282,  308,  508, 1172, 1246, 1299, 1299, 1299, 1237, 1299,
     1299, 1299, 1299, 1236, 1299, 1299, 1235,  362, 1299,    0,
     1196, 1206,    0,    0, 1220, 1299, 1299, 1200,  285, 1195,
     1191,    0, 1201, 1193, 1194, 1188, 1192,    0, 1185, 1182,
     1184, 1181, 1188, 1189, 1177,  207, 1182, 1184, 1299, 1175,

     1187, 1187,  272, 1184, 1171, 1176, 1184, 1180, 1167,    0,
     1166,    0,    0, 1164, 1164,  289, 1168, 1164, 1167,  293,
     1177, 1165, 1165, 1167,  329, 1173, 1159,  309, 1170, 1163,
     1154, 1299, 1299, 1299,    0,    0, 1113,    0,    0,    0,
        0, 1123, 1132,  315,  313,  319,    0,    0,    0,    0,
     1121,    0,  330,  372, 1299, 1210, 1299,    0, 1299, 1299,
      416,  432, 1299, 1299, 1299, 1299, 1299,    0, 1197, 1194,
      531, 1299, 1299,  567,  400,  603,  461, 1299, 1299, 1299,
     1299, 1299, 1299, 1299,    0, 1299, 1299, 1299, 1299, 1299,
     1156, 1299, 1299, 1299,  376,  551, 1299, 1206, 1299,  609,

      423,  624,  645,  445,  486,  589,  289,  480,  650,  523,
     1205, 1299, 1299, 1299,    0, 1151, 1166, 1159,    0, 1146,
     1139, 1135, 1142, 1150, 1137, 1130, 1141, 1140, 1147, 1133,
     1147, 1140, 1127, 1134, 1138,    0, 1121, 1134, 1134, 1129,
     1122, 1131, 1116, 1120, 1116, 1112,    0,    0, 1174, 1121,
     1111, 1133, 1114, 1102, 1123, 1117, 1119, 1117, 1102,  402,
     1119, 1120, 1113, 1112, 1121, 1120, 1096, 1102, 1107, 1102,
     1091, 1098,    0, 1064,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  527,  555, 1139, 1138, 1135,
     1134,  418, 1299, 1299, 1299, 1299, 1299, 1299, 1085,  670,

      571,  685,  694,  437,  703,  712,  718,  722,  736,  727,
      740,  750,  754, 1146, 1299, 1082,    0, 1081, 1094, 1084,
     1085, 1091,    0, 1084, 1089, 1080, 1081, 1080, 1073,  459,
     1072, 1083, 1076, 1081, 1070, 1073,    0, 1070, 1083, 1086,
      446, 1085, 1070, 1060, 1068, 1062, 1076, 1299, 1055,  515,
     1072, 1067, 1058, 1069, 1068, 1048, 1050, 1071, 1059,    0,
     1051, 1299, 1299,    0, 1058, 1056, 1054, 1046, 1054, 1001,
      758,  386,  465, 1299, 1299, 1093,  762,  766,  775,  784,
      788,  792,  802,  806,  810,  820, 1027, 1037, 1037, 1054,
     1029, 1046, 1037, 1044, 1053, 1027, 1032,    0,    0, 1036,

     1033, 1023, 1043,    0, 1030, 1023, 1044, 1029, 1017, 1017,
     1299, 1299, 1299, 1299,  975,  984,  969,  964,  957,  966,
      963,  949,  953,    0,  903,  897,  898,  897,  900, 1299,
      892,  892,  914,    0,  895,  890,    0,  442,  938,  935,
     1299,  824,  828,  837,  856,    0,  894,  885,  902,  905,
      880,  875, 1299,  892,  883,  874,  889,  882,  885,  886,
      895, 1299,  876,  869,  876,  891,  876, 1299,    0,  871,
     1299, 1299,  866,  877,  864,    0,  861,  866,    0,  865,
      868, 1299,  871,  880,    0,    0,  843,  867,  872,  860,
     1299,  866,  871,  870,    0,  859,  846,  847,  864,    0,

     1299,  859,  839,  855, 1299,  848,  854,  854,  843,  845,
        0,  851,  852,  848,  849, 1299,  849,  853,  847,  836,
      850,  537,  844,  829,  841,  836,  832,  848,    0,  837,
      815,    0,  819,  791,    0,    0,  813,  797,  793,  853,
      762,  769,  765,  769,  765,  742,  754,  748,  742,  747,
      729,  710, 1299,  698,    0, 1299,  710, 1299,  704,  696,
      857,  640,  670,  682,  676,  669,  668,  649,    0,  666,
      648,  638,  647,  628,  631,  642,  626,  604,  861,  620,
      617,    0,    0,  623,  618,  607,  597,  607,    0,    0,
      598,  604,  597,  553,  865,  581,    0,    0,  594,  592,

      577,  576,  567,  560,    0, 1299,  548,  564,  544,  537,
      551,    0,  531,  514,  511,    0,  473,  472,  468,  433,
      404,  370,  332,  319,  305,  283,  215,  187,  157,  136,
        0,   93,    0,    0,    0,   87,    0, 1299,  965,  973,
      981,  989,  994,  996, 1003, 1011, 1019, 1027, 1035, 1043,
     1045, 1052, 1060, 1068, 1076
    } ;

static yyconst flex_int16_t yy_def[756] =
    {   0,
      738,    1,  739,  739,  740,  740,  741,  741,  742,  742,
      738,  738,  738,  738,  738,  738,  738,  738,  743,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  744,  744,
      744,  744,  744,  744,  738,  738,  738,  738,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      738,  738,  738,  738,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  745,  738,  746,  747,  738,  738,  748,
      738,  738,  749,  750,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      751,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  752,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  744,
      744,  744,  744,  744,  744,  738,  738,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  738,  744,

      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  738,  738,  738,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  745,  746,  746,  738,  747,  738,  748,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  750,  753,  754,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  751,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  752,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      755,  738,  738,  738,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  738,  738,  753,  753,  754,
      754,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  755,  738,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  738,  744,  744,  738,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  738,  738,  744,  744,  744,  744,  744,  744,  744,
      738,  753,  754,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,

      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      738,  738,  738,  738,  744,  744,  738,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  738,
      744,  744,  744,  744,  744,  744,  744,  744,  753,  754,
      738,  738,  738,  738,  738,  744,  744,  744,  744,  744,
      744,  744,  738,  744,  744,  744,  744,  744,  744,  744,
      744,  738,  744,  744,  744,  744,  744,  738,  744,  744,
      738,  738,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  738,  744,  744,  744,  744,  738,  744,  744,  744,
      738,  744,  744,  744,  744,  744,  744,  744,  744,  744,

      738,  744,  744,  744,  738,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  738,  738,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  738,
      738,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  738,  744,  744,  738,  744,  738,  744,  744,
      738,  738,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  738,  738,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  738,  738,  744,  744,  744,  744,  744,

      744,  744,  744,  744,  744,  738,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,    0,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738
    } ;

static yyconst flex_uint16_t yy_nxt[1411] =
    {   0,
       12,   13,   14,   13,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   31,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   40,   40,   42,   43,   40,   40,   40,
       44,   45,   13,   46,   47,   12,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   40,   64,   65,   66,   67,   68,   69,   70,
       40,   71,   72,   73,   74,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   75,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,

       40,   40,   40,   76,   77,   78,   79,   80,   81,   82,
       83,   85,   85,   88,   88,   91,   91,   95,   92,   92,
       95,  129,   86,   86,   89,   89,   97,  125,   97,  127,
      117,  155,  121,  122,  118,  123,  156,  157,  737,  158,
      126,  128,  736,  107,  108,  166,  167,  119,  131,  130,
      132,  159,  160,  161,  109,   93,   93,  185,  133,  134,
      173,   96,  110,  186,   96,  120,  124,   97,   99,  176,
      100,  286,  287,  101,  101,  102,  103,  112,  187,  113,
      174,  114,  177,  188,  103,  103,  103,  103,  135,  136,
      208,  137,  138,  139,  140,  140,  140,  140,  162,  209,

      735,  103,  104,  103,  103,  103,  103,  115,  142,  116,
      275,  275,  275,  143,  105,  163,  164,  165,  144,  141,
      194,  233,  734,  106,  195,  147,  145,  148,  148,  148,
      148,  210,  211,  196,  212,  147,  149,  148,  148,  148,
      148,  150,  168,  168,  168,  168,  149,  199,  303,  203,
      733,  150,  169,  178,  204,  179,  151,  180,  200,  150,
      181,  182,  183,  205,  335,  201,  303,  234,  152,  150,
      336,  206,  235,  146,  732,  236,  207,  153,  189,  190,
      191,  192,  213,  193,  214,  219,  215,  216,  237,  220,
      217,  221,  239,  218,  223,  254,  224,  240,  225,  222,

      255,  307,  307,  238,  242,  243,  244,  245,  307,  307,
      246,  154,  248,  226,  249,  250,  261,  261,  261,  262,
       97,  154,   97,  140,  140,  140,  140,  308,  308,  308,
      277,  342,  295,  278,  279,  319,  343,  296,  320,  101,
      101,  102,  103,  738,  353,  263,  354,  731,  738,  264,
      103,  103,  103,  103,  358,  296,  265,  359,  360,  369,
      266,   97,  267,  280,  730,  281,  729,  103,  271,  103,
      103,  103,  103,  370,  272,  102,  102,  102,  103,  728,
      273,  168,  168,  168,  168,  254,  103,  103,  103,  103,
      255,  365,  539,  282,  366,  283,  377,  378,  380,  379,

      472,  381,  382,  103,  103,  103,  103,  103,  103,  400,
      272,  103,  103,  103,  103,  383,  273,  727,  384,  275,
      275,  275,  103,  103,  103,  103,  304,  400,  304,  474,
      475,  305,  305,  305,  305,  386,  386,  386,  387,  103,
      103,  103,  103,  103,  103,  306,  272,  274,  274,  103,
      103,  387,  387,  387,  387,  726,  406,  512,  103,  103,
      103,  103,  456,  306,  305,  305,  305,  305,  457,  392,
      480,  540,  393,  394,  406,  103,  103,  103,  103,  103,
      103,  473,  272,  276,  276,  276,  276,  513,  480,  300,
      300,  300,  300,  725,  276,  276,  276,  276,  301,  308,

      308,  308,  395,  302,  396,  305,  305,  305,  305,  500,
      501,  276,  276,  276,  276,  276,  276,  502,  585,  586,
      147,  302,  148,  148,  148,  148,  724,  309,  309,  309,
      309,  149,  397,  723,  398,  521,  150,  722,  309,  309,
      309,  309,  413,  413,  413,  413,  471,  471,  471,  387,
      103,  103,  103,  103,  150,  309,  309,  309,  309,  309,
      309,  103,  103,  103,  103,  401,  522,  401,  721,  720,
      402,  402,  402,  402,  387,  387,  387,  387,  103,  103,
      103,  103,  103,  103,  403,  272,  274,  274,  103,  103,
      402,  402,  402,  402,  719,  646,  718,  103,  103,  103,

      103,  717,  403,  304,  647,  304,  154,  716,  305,  305,
      305,  305,  715,  714,  103,  103,  103,  103,  103,  103,
      713,  272,  276,  276,  276,  276,  712,  711,  300,  300,
      300,  300,  710,  276,  276,  276,  276,  404,  407,  709,
      407,  708,  405,  408,  408,  408,  408,  707,  706,  705,
      276,  276,  276,  276,  276,  276,  704,  409,  703,  410,
      405,  410,  702,  701,  411,  411,  411,  411,  700,  309,
      309,  309,  309,  699,  698,  409,  697,  696,  412,  694,
      309,  309,  309,  309,  477,  693,  477,  692,  691,  478,
      478,  478,  478,  690,  689,  688,  412,  309,  309,  309,

      309,  309,  309,  479,  402,  402,  402,  402,  401,  687,
      401,  686,  685,  402,  402,  402,  402,  481,  684,  481,
      683,  479,  482,  482,  482,  482,  484,  682,  484,  681,
      680,  485,  485,  485,  485,  679,  483,  408,  408,  408,
      408,  408,  408,  408,  408,  486,  411,  411,  411,  411,
      407,  677,  407,  676,  483,  408,  408,  408,  408,  411,
      411,  411,  411,  486,  410,  675,  410,  674,  673,  411,
      411,  411,  411,  413,  413,  413,  413,  387,  387,  387,
      387,  478,  478,  478,  478,  478,  478,  478,  478,  477,
      672,  477,  671,  670,  478,  478,  478,  478,  542,  669,

      542,  668,  667,  543,  543,  543,  543,  482,  482,  482,
      482,  482,  482,  482,  482,  666,  481,  544,  481,  665,
      664,  482,  482,  482,  482,  485,  485,  485,  485,  485,
      485,  485,  485,  663,  484,  544,  484,  662,  660,  485,
      485,  485,  485,  543,  543,  543,  543,  543,  543,  543,
      543,  542,  659,  542,  658,  657,  543,  543,  543,  543,
      656,  487,  617,  617,  617,  617,  640,  655,  617,  617,
      617,  617,  661,  661,  661,  661,  661,  661,  661,  661,
      695,  695,  695,  695,  695,  695,  695,  695,  654,  653,
      652,  651,  650,  649,  648,  645,  644,  643,  642,  639,

      638,  637,  636,  635,  634,  633,  632,  631,  630,  629,
      628,  627,  626,  625,  624,  623,  622,  621,  620,  619,
      618,  616,  615,  614,  613,  612,  611,  610,  609,  608,
      607,  606,  605,  604,  603,  602,  601,  600,  599,  598,
      597,  596,  595,  594,  593,  592,  591,  590,  589,  588,
      587,  391,  389,  584,  583,  582,  641,  581,  580,  579,
      578,  577,  576,  575,  678,   84,   84,   84,   84,   84,
       84,   84,   84,   87,   87,   87,   87,   87,   87,   87,
       87,   90,   90,   90,   90,   90,   90,   90,   90,   94,
       94,   94,   94,   94,   94,   94,   94,  111,  574,  573,

      111,  170,  170,  252,  572,  252,  252,  571,  252,  252,
      252,  253,  570,  253,  253,  253,  253,  253,  253,  256,
      256,  256,  256,  569,  256,  256,  256,  258,  568,  567,
      258,  258,  258,  258,  258,  260,  260,  260,  260,  260,
      260,  260,  260,  268,  566,  268,  268,  268,  268,  268,
      285,  285,  298,  298,  298,  298,  298,  298,  298,  298,
      388,  388,  388,  388,  565,  388,  388,  388,  390,  390,
      390,  390,  564,  390,  390,  390,  414,  414,  414,  414,
      414,  414,  414,  414,  563,  562,  561,  560,  559,  558,
      557,  556,  555,  554,  553,  552,  551,  550,  549,  548,

      547,  546,  545,  541,  538,  537,  536,  535,  534,  533,
      532,  531,  530,  529,  528,  527,  526,  525,  524,  523,
      520,  519,  518,  517,  516,  515,  514,  511,  510,  509,
      508,  507,  506,  505,  504,  503,  499,  498,  497,  496,
      495,  494,  493,  492,  491,  490,  489,  488,  415,  476,
      473,  391,  472,  389,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  461,  460,  459,  458,  455,  454,  453,
      452,  451,  450,  449,  448,  447,  446,  445,  444,  443,
      442,  441,  440,  439,  438,  437,  436,  435,  434,  433,
      432,  431,  430,  429,  428,  427,  426,  425,  424,  423,

      422,  421,  420,  419,  418,  417,  416,  415,  299,  399,
      391,  389,  257,  385,  376,  375,  374,  373,  372,  371,
      368,  367,  364,  363,  362,  361,  357,  356,  355,  352,
      351,  350,  349,  348,  347,  346,  345,  344,  341,  340,
      339,  338,  337,  334,  333,  332,  331,  330,  329,  328,
      327,  326,  325,  324,  323,  322,  321,  318,  317,  316,
      315,  314,  313,  312,  311,  310,  299,  297,  294,  293,
      292,  291,  290,  289,  288,  284,  270,  269,  259,  257,
      251,  247,  241,  232,  231,  230,  229,  228,  227,  202,
      198,  197,  184,  175,  172,  171,   98,  738,   11,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738
    } ;

static yyconst flex_int16_t yy_chk[1411] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    5,    6,    7,    8,    9,    7,    8,
       10,   26,    3,    4,    5,    6,   13,   24,   13,   25,
       20,   32,   21,   21,   20,   21,   32,   32,  736,   32,
       24,   25,  732,   19,   19,   36,   36,   20,   27,   26,
       27,   34,   34,   34,   19,    7,    8,   51,   27,   27,
       43,    9,   19,   51,   10,   20,   21,   13,   17,   47,
       17,  114,  114,   17,   17,   17,   17,   19,   52,   19,
       43,   19,   47,   52,   17,   17,   17,   17,   28,   28,
       61,   28,   28,   28,   28,   28,   28,   28,   35,   61,

      730,   17,   17,   17,   17,   17,   17,   19,   29,   19,
      105,  105,  105,   29,   17,   35,   35,   35,   29,   28,
       54,   72,  729,   17,   54,   30,   29,   30,   30,   30,
       30,   62,   62,   54,   62,   31,   30,   31,   31,   31,
       31,   30,   38,   38,   38,   38,   31,   57,  149,   59,
      728,   31,   38,   49,   59,   49,   30,   49,   57,   30,
       49,   49,   49,   60,  196,   57,  149,   72,   30,   31,
      196,   60,   76,   29,  727,   76,   60,   30,   53,   53,
       53,   53,   63,   53,   63,   64,   63,   63,   77,   64,
       63,   64,   78,   63,   65,   86,   65,   78,   65,   64,

       86,  151,  151,   77,   80,   80,   80,   80,  307,  307,
       80,   30,   82,   65,   82,   82,   93,   93,   93,   93,
       97,   31,   97,  140,  140,  140,  140,  152,  152,  152,
      108,  203,  140,  108,  108,  179,  203,  140,  179,  101,
      101,  101,  101,  253,  216,   93,  216,  726,  253,   93,
      101,  101,  101,  101,  220,  140,   93,  220,  220,  228,
       93,   97,   93,  108,  725,  108,  724,  101,  101,  101,
      101,  101,  101,  228,  101,  102,  102,  102,  102,  723,
      101,  168,  168,  168,  168,  254,  102,  102,  102,  102,
      254,  225,  472,  108,  225,  108,  244,  244,  245,  244,

      472,  245,  245,  102,  102,  102,  102,  102,  102,  295,
      102,  103,  103,  103,  103,  246,  102,  722,  246,  275,
      275,  275,  103,  103,  103,  103,  150,  295,  150,  392,
      392,  150,  150,  150,  150,  261,  261,  261,  261,  103,
      103,  103,  103,  103,  103,  150,  103,  104,  104,  104,
      104,  262,  262,  262,  262,  721,  301,  441,  104,  104,
      104,  104,  360,  150,  304,  304,  304,  304,  360,  277,
      404,  473,  277,  277,  301,  104,  104,  104,  104,  104,
      104,  473,  104,  106,  106,  106,  106,  441,  404,  147,
      147,  147,  147,  720,  106,  106,  106,  106,  147,  308,

      308,  308,  277,  147,  277,  305,  305,  305,  305,  430,
      430,  106,  106,  106,  106,  106,  106,  430,  538,  538,
      148,  147,  148,  148,  148,  148,  719,  153,  153,  153,
      153,  148,  277,  718,  277,  450,  148,  717,  153,  153,
      153,  153,  310,  310,  310,  310,  386,  386,  386,  386,
      271,  271,  271,  271,  148,  153,  153,  153,  153,  153,
      153,  271,  271,  271,  271,  296,  450,  296,  715,  714,
      296,  296,  296,  296,  387,  387,  387,  387,  271,  271,
      271,  271,  271,  271,  296,  271,  274,  274,  274,  274,
      401,  401,  401,  401,  713,  622,  711,  274,  274,  274,

      274,  710,  296,  306,  622,  306,  148,  709,  306,  306,
      306,  306,  708,  707,  274,  274,  274,  274,  274,  274,
      704,  274,  276,  276,  276,  276,  703,  702,  300,  300,
      300,  300,  701,  276,  276,  276,  276,  300,  302,  700,
      302,  699,  300,  302,  302,  302,  302,  696,  694,  693,
      276,  276,  276,  276,  276,  276,  692,  302,  691,  303,
      300,  303,  688,  687,  303,  303,  303,  303,  686,  309,
      309,  309,  309,  685,  684,  302,  681,  680,  303,  678,
      309,  309,  309,  309,  400,  677,  400,  676,  675,  400,
      400,  400,  400,  674,  673,  672,  303,  309,  309,  309,

      309,  309,  309,  400,  402,  402,  402,  402,  403,  671,
      403,  670,  668,  403,  403,  403,  403,  405,  667,  405,
      666,  400,  405,  405,  405,  405,  406,  665,  406,  664,
      663,  406,  406,  406,  406,  662,  405,  407,  407,  407,
      407,  408,  408,  408,  408,  406,  410,  410,  410,  410,
      409,  660,  409,  659,  405,  409,  409,  409,  409,  411,
      411,  411,  411,  406,  412,  657,  412,  654,  652,  412,
      412,  412,  412,  413,  413,  413,  413,  471,  471,  471,
      471,  477,  477,  477,  477,  478,  478,  478,  478,  479,
      651,  479,  650,  649,  479,  479,  479,  479,  480,  648,

      480,  647,  646,  480,  480,  480,  480,  481,  481,  481,
      481,  482,  482,  482,  482,  645,  483,  480,  483,  644,
      643,  483,  483,  483,  483,  484,  484,  484,  484,  485,
      485,  485,  485,  642,  486,  480,  486,  641,  639,  486,
      486,  486,  486,  542,  542,  542,  542,  543,  543,  543,
      543,  544,  638,  544,  637,  634,  544,  544,  544,  544,
      633,  413,  587,  587,  587,  587,  617,  631,  617,  617,
      617,  617,  640,  640,  640,  640,  661,  661,  661,  661,
      679,  679,  679,  679,  695,  695,  695,  695,  630,  628,
      627,  626,  625,  624,  623,  621,  620,  619,  618,  615,

      614,  613,  612,  610,  609,  608,  607,  606,  604,  603,
      602,  599,  598,  597,  596,  594,  593,  592,  590,  589,
      588,  584,  583,  581,  580,  578,  577,  575,  574,  573,
      570,  567,  566,  565,  564,  563,  561,  560,  559,  558,
      557,  556,  555,  554,  552,  551,  550,  549,  548,  547,
      545,  540,  539,  536,  535,  533,  617,  532,  531,  529,
      528,  527,  526,  525,  661,  739,  739,  739,  739,  739,
      739,  739,  739,  740,  740,  740,  740,  740,  740,  740,
      740,  741,  741,  741,  741,  741,  741,  741,  741,  742,
      742,  742,  742,  742,  742,  742,  742,  743,  523,  522,

      743,  744,  744,  745,  521,  745,  745,  520,  745,  745,
      745,  746,  519,  746,  746,  746,  746,  746,  746,  747,
      747,  747,  747,  518,  747,  747,  747,  748,  517,  516,
      748,  748,  748,  748,  748,  749,  749,  749,  749,  749,
      749,  749,  749,  750,  515,  750,  750,  750,  750,  750,
      751,  751,  752,  752,  752,  752,  752,  752,  752,  752,
      753,  753,  753,  753,  510,  753,  753,  753,  754,  754,
      754,  754,  509,  754,  754,  754,  755,  755,  755,  755,
      755,  755,  755,  755,  508,  507,  506,  505,  503,  502,
      501,  500,  497,  496,  495,  494,  493,  492,  491,  490,

      489,  488,  487,  476,  470,  469,  468,  467,  466,  465,
      461,  459,  458,  457,  456,  455,  454,  453,  452,  451,
      449,  447,  446,  445,  444,  443,  442,  440,  439,  438,
      436,  435,  434,  433,  432,  431,  429,  428,  427,  426,
      425,  424,  422,  421,  420,  419,  418,  416,  414,  399,
      391,  390,  389,  388,  374,  372,  371,  370,  369,  368,
      367,  366,  365,  364,  363,  362,  361,  359,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  335,  334,
      333,  332,  331,  330,  329,  328,  327,  326,  325,  324,

      323,  322,  321,  320,  318,  317,  316,  311,  298,  291,
      270,  269,  256,  251,  243,  242,  237,  231,  230,  229,
      227,  226,  224,  223,  222,  221,  219,  218,  217,  215,
      214,  211,  209,  208,  207,  206,  205,  204,  202,  201,
      200,  198,  197,  195,  194,  193,  192,  191,  190,  189,
      187,  186,  185,  184,  183,  181,  180,  178,  175,  172,
      171,  167,  164,  159,  155,  154,  144,  142,  138,  132,
      125,  124,  123,  122,  121,  109,  100,   99,   92,   87,
       83,   81,   79,   71,   70,   69,   68,   67,   66,   58,
       56,   55,   50,   44,   41,   39,   15,   11,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "input_lexer.ll"
/* -*- mode: C++; compile-command: "flex input_lexer.ll && make input_lexer.o " -*- */
/* Note: for the nspire port, after flex, move from #ifdef HAVE_CONFIG_H 
   to #include "first.h" before #include<stdio.h> 
   and map "log" to log10 instead of ln
   // casio: copy lexer.h.bak to lexer.h
  // replace isatty( fileno(...) by isatty(0 in input_lexer.cc, replace getc( yyin ) by fgetc(yyin)
*/
/** @file input_lexer.ll
 *
 *  Lexical analyzer definition for reading expressions.
 *  Note Maple input should be processed replacing # with // and { } for set
 *  This file must be processed with flex. */
/*
 *  Copyright (C) 2001,14 B. Parisse, Institut Fourier, 38402 St Martin d'Heres
 *  The very first version was inspired by GiNaC lexer
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * The lexer will first check for static patterns and strings (defined below)
 * If a match is not found, it calls find_or_make_symbol
 * This function looks first if the string should be translated
 * (e.g. add a prefix from the export table)
 * then look in lexer_functions for a match, then look in sym_tab
 * if not found in sym_tab, a new identificateur is created & added in sym_tab
 * Functions in lexer_functions are added during the construction
 * of the corresponding unary_functions using lexer_functions_register
 */
/*
 *  Definitions
 */
#line 50 "input_lexer.ll"
#include "giacPCH.h"
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include <iostream>
#include <stdexcept>
int confirm(const char * msg1,const char * msg2,bool acexit);

#include "gen.h"
#include "input_lexer.h"
#include "help.h"
#include "identificateur.h"
#include "usual.h"
#include "derive.h"
#include "series.h"
#include "intg.h"
#include "sym2poly.h"
#include "moyal.h"
#include "subst.h"
#include "vecteur.h"
#include "modpoly.h"
#include "lin.h"
#include "solve.h"
#include "ifactor.h"
#include "alg_ext.h"
#include "gauss.h"
#include "isom.h"
#include "plot.h"
#include "ti89.h"

#include "prog.h"
#include "rpn.h"
#include "ezgcd.h"
#include "tex.h"
#include "risch.h"
#include "permu.h"
#include "input_parser.h"    

#if defined(RTOS_THREADX) || defined(__MINGW_H) || defined NSPIRE || defined FXCG || defined MS_SMART || defined(FREERTOS) || defined TICE
  int isatty (int ){ return 0; }
#endif


  using namespace std;
  using namespace giac;
  void giac_yyset_column (int  column_no , yyscan_t yyscanner);
  int giac_yyget_column (yyscan_t yyscanner);
#define YY_USER_ACTION giac_yyset_column(giac_yyget_column(yyscanner)+yyleng,yyscanner);
#define YY_USER_INIT giac_yyset_column(1,yyscanner);

#ifndef NO_NAMESPACE_GIAC
  namespace giac {
#endif // ndef NO_NAMESPACE_GIAC

    void increment_lexer_line_number_setcol(yyscan_t yyscanner,GIAC_CONTEXT){
      giac_yyset_column(1,yyscanner);
      increment_lexer_line_number(contextptr);
    }
    bool doing_insmod = false;

    int lock_syms_mutex(){ return 0; }
    void unlock_syms_mutex(){}

    sym_string_tab & syms(){
      static sym_string_tab * ans=0;
      if (!ans) ans=new sym_string_tab;
      return * ans;
    }


    bool tri1(const lexer_tab_int_type & a,const lexer_tab_int_type & b){
      int res= strcmp(a.keyword,b.keyword);
      return res<0;
    }

    bool tri2(const char * a,const char * b){
      return strcmp(a,b)<0;
    }

    const lexer_tab_int_type lexer_tab_int_values []={
#include "lexer_tab_int.h"
    };

    const lexer_tab_int_type * const lexer_tab_int_values_begin = lexer_tab_int_values;
    const unsigned lexer_tab_int_values_n=sizeof(lexer_tab_int_values)/sizeof(lexer_tab_int_type);
    const lexer_tab_int_type * const lexer_tab_int_values_end = lexer_tab_int_values+lexer_tab_int_values_n;
#ifndef NO_NAMESPACE_GIAC
  } // namespace giac
#endif // ndef NO_NAMESPACE_GIAC

/* Abbreviations */
/* If changed, modify isalphan in help.cc FIXME is . allowed inside alphanumeric ? answer NO */




/*
 *  Lexical rules
 */
#line 1135 "input_lexer.cc"

#define INITIAL 0
#define comment 1
#define comment_hash 2
#define str 3
#define backquote 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
//#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int giac_yylex_init (yyscan_t* scanner);

int giac_yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int giac_yylex_destroy (yyscan_t yyscanner );

int giac_yyget_debug (yyscan_t yyscanner );

void giac_yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE giac_yyget_extra (yyscan_t yyscanner );

void giac_yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *giac_yyget_in (yyscan_t yyscanner );

void giac_yyset_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *giac_yyget_out (yyscan_t yyscanner );

void giac_yyset_out  (FILE * _out_str ,yyscan_t yyscanner );

			int giac_yyget_leng (yyscan_t yyscanner );

char *giac_yyget_text (yyscan_t yyscanner );

int giac_yyget_lineno (yyscan_t yyscanner );

void giac_yyset_lineno (int _line_number ,yyscan_t yyscanner );

int giac_yyget_column  (yyscan_t yyscanner );

void giac_yyset_column (int _column_no ,yyscan_t yyscanner );

YYSTYPE * giac_yyget_lval (yyscan_t yyscanner );

void giac_yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int giac_yywrap (yyscan_t yyscanner );
#else
extern int giac_yywrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

#define ECHO
/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = fgetc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int giac_yylex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int giac_yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			giac_yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		giac_yy_load_buffer_state(yyscanner );
		}

	{
#line 161 "input_lexer.ll"


#line 1417 "input_lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 739 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1299 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 163 "input_lexer.ll"
/* skip whitespace */
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 164 "input_lexer.ll"
increment_lexer_line_number_setcol(yyscanner,yyextra); //CERR << "Scanning line " << lexer_line_number(yyextra) << endl;
	YY_BREAK
/* Strings */
/* \"[^\"]*\"        yylval = string2gen( giac_yytext); return T_STRING; */
case 3:
YY_RULE_SETUP
#line 167 "input_lexer.ll"
BEGIN(str); comment_s("",yyextra);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 168 "input_lexer.ll"
increment_comment_s('"',yyextra);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 169 "input_lexer.ll"
{  index_status(yyextra)=1; BEGIN(INITIAL); 
                  (*yylval)=string2gen(comment_s(yyextra),false); 
                  return T_STRING; }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 172 "input_lexer.ll"
increment_comment_s('\n',yyextra); increment_lexer_line_number_setcol(yyscanner,yyextra);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 173 "input_lexer.ll"
{
                   /* octal escape sequence */
                   int result=0;
                   //(void) sscanf( yytext + 1, "%o", &result );
                   increment_comment_s(char(result & 0xff),yyextra);
                   }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 179 "input_lexer.ll"
{
                   /* generate error - bad escape sequence; something
                    * like '\48' or '\0777777'
                    */
                   }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 184 "input_lexer.ll"
increment_comment_s('\n',yyextra);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 185 "input_lexer.ll"
increment_comment_s('\t',yyextra);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 186 "input_lexer.ll"
increment_comment_s('\r',yyextra);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 187 "input_lexer.ll"
increment_comment_s('\b',yyextra);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 188 "input_lexer.ll"
increment_comment_s('\f',yyextra);
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 189 "input_lexer.ll"
increment_comment_s(yytext[1],yyextra);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 190 "input_lexer.ll"
increment_comment_s(yytext,yyextra);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 191 "input_lexer.ll"
BEGIN(backquote); comment_s("",yyextra); 
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 192 "input_lexer.ll"
increment_comment_s('\n',yyextra); increment_lexer_line_number_setcol(yyscanner,yyextra);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 193 "input_lexer.ll"
increment_comment_s(yytext,yyextra);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 194 "input_lexer.ll"
{  index_status(yyextra)=1; BEGIN(INITIAL); 
  return find_or_make_symbol(comment_s(yyextra),(*yylval),yyscanner,true,yyextra); }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 197 "input_lexer.ll"
index_status(yyextra)=0; increment_lexer_line_number_setcol(yyscanner,yyextra);
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 198 "input_lexer.ll"
index_status(yyextra)=0; increment_lexer_line_number_setcol(yyscanner,yyextra);/* (*yylval) = string2gen('"'+string(giac_yytext).substr(2,string(giac_yytext).size()-3)+'"');   return T_COMMENT; */
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 199 "input_lexer.ll"
BEGIN(comment); comment_s(yyextra)="";
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 201 "input_lexer.ll"
comment_s(yyextra)+=yytext; /* eat anything that's not a '*' */
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 202 "input_lexer.ll"
comment_s(yyextra)+=yytext; /* eat up '*'s not followed by '/'s */
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 203 "input_lexer.ll"
comment_s(yyextra) += '\n'; increment_lexer_line_number_setcol(yyscanner,yyextra); CERR << "(Comment) scanning line " << lexer_line_number(yyextra) << endl;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 204 "input_lexer.ll"
BEGIN(INITIAL); index_status(yyextra)=0; /* (*yylval) = string2gen(comment_s(yyextra),false); return T_COMMENT; */
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 205 "input_lexer.ll"
index_status(yyextra)=0; /* (*yylval) = string2gen('"'+string(yytext).substr(3,string(yytext).size()-6)+'"'); return T_COMMENT; */
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 206 "input_lexer.ll"
index_status(yyextra)=0; /* (*yylval) = string2gen('"'+string(yytext).substr(3,string(yytext).size()-6)+'"'); return T_COMMENT; */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 208 "input_lexer.ll"
if (index_status(yyextra)) return T_INTERROGATION; if (calc_mode(yyextra)==1){ *yylval=undef; return T_SYMBOL;}  return T_HELP;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 209 "input_lexer.ll"
if (opened_quote(yyextra) & 1) { opened_quote(yyextra) &= 0x7ffffffe; return T_QUOTE; } if (index_status(yyextra) && !in_rpn(yyextra) && xcas_mode(yyextra)!= 1) return T_PRIME; opened_quote(yyextra) |= 1; return T_QUOTE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 210 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=0; return T_SEMI;
	YY_BREAK
/* commented otherwise for(;;) will not work ";;"			index_status(yyextra)=0; if (xcas_mode(yyextra)==3) return TI_SEMI; (*yylval)=0; return T_SEMI; */
case 32:
YY_RULE_SETUP
#line 212 "input_lexer.ll"
index_status(yyextra)=0; return T_SEMI; 
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 213 "input_lexer.ll"
if (spread_formula(yyextra)) return T_DEUXPOINTS;  index_status(yyextra)=0; if (xcas_mode(yyextra)>0) { (*yylval)=1; return T_SEMI; } else return T_DEUXPOINTS;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 214 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=1; return T_SEMI;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 215 "input_lexer.ll"
index_status(yyextra)=0;return T_DOUBLE_DEUX_POINTS;
	YY_BREAK
/* special values */
case 36:
YY_RULE_SETUP
#line 219 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=theta__IDNT_e; return T_SYMBOL;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 220 "input_lexer.ll"
index_status(yyextra)=1; if (xcas_mode(yyextra) > 0 || !i_sqrt_minus1(yyextra)) { (*yylval)=i__IDNT_e; return T_SYMBOL; } else { (*yylval) = cst_i; return T_LITERAL;};
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 221 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 222 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 223 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
/* \xef\xbd\x89            index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL; */
case 41:
YY_RULE_SETUP
#line 225 "input_lexer.ll"
index_status(yyextra)=1; if (xcas_mode(yyextra)==0 || xcas_mode(yyextra)==3 || rpn_mode(yyextra)) { return find_or_make_symbol(yytext,(*yylval),yyscanner,true,yyextra); } else { (*yylval) = cst_i; return T_LITERAL; };
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 226 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 227 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 228 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 229 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 230 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_euler_gamma; return T_LITERAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 231 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = unsigned_inf; return T_LITERAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 232 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = plus_inf; return T_LITERAL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 233 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = plus_inf; return T_LITERAL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 234 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = unsigned_inf; return T_LITERAL;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 235 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = plus_inf; return T_LITERAL;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 236 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = minus_inf; return T_LITERAL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 237 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = undef; return T_LITERAL;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 238 "input_lexer.ll"
return T_END_INPUT;
	YY_BREAK
/* integer values */
case 55:
YY_RULE_SETUP
#line 241 "input_lexer.ll"
if (python_compat(yyextra)){ *yylval=at_python_list; return T_UNARY_OP; } if (xcas_mode(yyextra)==3) { index_status(yyextra)=1; return find_or_make_symbol(yytext,(*yylval),yyscanner,true,yyextra); } index_status(yyextra)=0; (*yylval) = _MAPLE_LIST ; (*yylval).subtype=_INT_MAPLECONVERSION ;return T_TYPE_ID;
	YY_BREAK
/* vector/polynom/matrice delimiters */
case 56:
YY_RULE_SETUP
#line 245 "input_lexer.ll"
(*yylval) = _SEQ__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 246 "input_lexer.ll"
(*yylval) = _SET__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 247 "input_lexer.ll"
(*yylval) = _INTERVAL__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 248 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _LIST__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 249 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _LIST__VECT; return T_BEGIN_PAR;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 250 "input_lexer.ll"
(*yylval) = _RPN_FUNC__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 251 "input_lexer.ll"
(*yylval) = _GROUP__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 252 "input_lexer.ll"
(*yylval) = _LINE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 253 "input_lexer.ll"
(*yylval) = _VECTOR__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 254 "input_lexer.ll"
(*yylval) = _MATRIX__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 255 "input_lexer.ll"
(*yylval) = _PNT__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 256 "input_lexer.ll"
(*yylval) = _POINT__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 257 "input_lexer.ll"
(*yylval) = _TUPLE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 258 "input_lexer.ll"
(*yylval) = _CURVE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 259 "input_lexer.ll"
(*yylval) = _HALFLINE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 260 "input_lexer.ll"
(*yylval) = _POLY1__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 261 "input_lexer.ll"
(*yylval) = _ASSUME__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 262 "input_lexer.ll"
(*yylval) = _LOGO__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 263 "input_lexer.ll"
(*yylval) = _FOLDER__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 264 "input_lexer.ll"
(*yylval) = _POLYEDRE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 265 "input_lexer.ll"
(*yylval) = _RGBA__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 266 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _LIST__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 267 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 268 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_strict,2);  return T_TEST_EQUAL;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 269 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_strict,2); return T_TEST_EQUAL;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 270 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen("rotate",0); return T_UNION; 
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 271 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen("shift",0); return T_UNION; 
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 272 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen("rotatesto",0); return T_UNION; 
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 273 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen("shiftsto",0); return T_UNION; 
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 274 "input_lexer.ll"
index_status(yyextra)=0; return T_VIRGULE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 275 "input_lexer.ll"
index_status(yyextra)=0; return T_VIRGULE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 276 "input_lexer.ll"
index_status(yyextra)=0; *yylval = 0; return T_BEGIN_PAR;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 277 "input_lexer.ll"
index_status(yyextra)=1; return T_END_PAR;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 278 "input_lexer.ll"
if (index_status(yyextra)) { index_status(yyextra)=0; return T_INDEX_BEGIN; } else { (*yylval) = 0; return T_VECT_DISPATCH; } ;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 279 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 280 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 281 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _POLY1__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 282 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 283 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _MATRIX__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 284 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 285 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _ASSUME__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 286 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
/* geometric delimiters */
case 98:
YY_RULE_SETUP
#line 288 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _GROUP__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 289 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 290 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _LINE__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 291 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 292 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _VECTOR__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 293 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 294 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _CURVE__VECT; return T_VECT_DISPATCH; 
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 295 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
/* gen delimiters */
case 106:
YY_RULE_SETUP
#line 297 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=_TABLE__VECT;return T_VECT_DISPATCH; 
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 298 "input_lexer.ll"
index_status(yyextra)=1;  return T_VECT_END;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 299 "input_lexer.ll"
index_status(yyextra)=0;  if (rpn_mode(yyextra)||calc_mode(yyextra)==1) { (*yylval)=0; return T_VECT_DISPATCH; } if (xcas_mode(yyextra)==3 || abs_calc_mode(yyextra)==38){ (*yylval) = _LIST__VECT;  return T_VECT_DISPATCH; } if (xcas_mode(yyextra) > 0 ){ (*yylval)=_SET__VECT; return T_VECT_DISPATCH; } else return T_BLOC_BEGIN;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 300 "input_lexer.ll"
index_status(yyextra)=1; if (rpn_mode(yyextra) || calc_mode(yyextra)==1 || python_compat(yyextra)) return T_VECT_END; if (xcas_mode(yyextra)==3 || abs_calc_mode(yyextra)==38) return T_VECT_END; if (xcas_mode(yyextra) > 0) return T_VECT_END; else return T_BLOC_END;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 301 "input_lexer.ll"
index_status(yyextra)=0;  (*yylval)=_SET__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 302 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 303 "input_lexer.ll"
index_status(yyextra)=0; return T_ROOTOF_BEGIN;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 304 "input_lexer.ll"
index_status(yyextra)=1; return T_ROOTOF_END;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 305 "input_lexer.ll"
index_status(yyextra)=0; return T_SPOLY1_BEGIN;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 306 "input_lexer.ll"
index_status(yyextra)=1; return T_SPOLY1_END;
	YY_BREAK
/* binary operators */
case 116:
YY_RULE_SETUP
#line 309 "input_lexer.ll"
index_status(yyextra)=0; return T_MAPSTO;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 310 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_same,2); return T_TEST_EQUAL;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 311 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_equal,2); return T_EQUAL;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 312 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_deuxpoints,2); return T_DEUXPOINTS;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 313 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_TEST_EQUAL;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 314 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_TEST_EQUAL;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 315 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 316 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 317 "input_lexer.ll"
spread_formula(yyextra)=!index_status(yyextra); index_status(yyextra)=0; (*yylval)=gen(at_equal,2); return T_EQUAL;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 318 "input_lexer.ll"
spread_formula(yyextra)=!index_status(yyextra); index_status(yyextra)=0; (*yylval)=gen(at_equal2,2); return T_EQUAL;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 319 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); if (xcas_mode(yyextra)>0) return T_DOLLAR_MAPLE; else return T_DOLLAR;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 320 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); return T_DOLLAR_MAPLE;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 321 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return T_AFFECT;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 322 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return TI_STO;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 323 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return TI_STO;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 324 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==3){ (*yylval)=gen(at_sto,2); return TI_STO; } else return T_MAPSTO;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 325 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return TI_STO;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 326 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return TI_STO;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 327 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_array_sto,2); return T_AFFECT;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 328 "input_lexer.ll"
index_status(yyextra)=1; yytext[0]='0'; (*yylval) = symb_double_deux_points(makevecteur(_IDNT_id_at,chartab2gen(yytext,yyextra))); return T_SYMBOL;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 329 "input_lexer.ll"
if (xcas_mode(yyextra)!=3) {index_status(yyextra)=0; (*yylval)=gen(at_compose,2); return T_COMPOSE; } BEGIN(comment_hash);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 330 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_composepow,2); return T_POW;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 331 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_AND_OP;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 332 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_tilocal,2); return T_PIPE;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 333 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_AND_OP;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 334 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_AND_OP;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 335 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_AND_OP;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 336 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_AND_OP;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 337 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_INTERVAL;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 338 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_INTERVAL;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 339 "input_lexer.ll"
if (xcas_mode(yyextra) || index_status(yyextra)) { (*yylval)=gen(at_factorial); return T_FACTORIAL; } else { index_status(yyextra)=0; (*yylval)=gen(at_not,1); return T_NOT; }
	YY_BREAK
/* standard functions */
case 147:
YY_RULE_SETUP
#line 342 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=symbolic(at_ans,0); return T_LITERAL;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 343 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_PLUS;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 344 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_increment,1); return T_FACTORIAL;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 345 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_increment,1); return T_UNION;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 346 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_increment,1); return T_UNION;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 347 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen("powsto",0); return T_UNION;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 348 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen("powsto",0); return T_UNION;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 349 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_decrement,1); return T_FACTORIAL;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 350 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_decrement,1); return T_UNION;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 351 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_decrement,1); return T_UNION;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 352 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointplus,2); return T_PLUS;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 353 "input_lexer.ll"
index_status(yyextra)=0; if (python_compat(yyextra)) { (*yylval)=gen(at_bitand,2); return T_AND_OP; } else { *yylval=gen(at_plus,2); return T_PLUS; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 354 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_bitnot,1); return T_NOT;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 355 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sqrt,2); return T_NOT;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 356 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_polar_complex,2); return T_MOD;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 357 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=2; return T_SQ;
	YY_BREAK
/* "','"                   index_status(yyextra)=0; (*yylval)=gen(at_makevector,2); return T_QUOTED_BINARY; commented because of f('a','b') */
case 163:
YY_RULE_SETUP
#line 359 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 360 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return T_PLUS; // return (calc_mode(yyextra)==38)?T_MOINS38:T_MOINS;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 361 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return T_PLUS;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 362 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointminus,2); return T_PLUS;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 363 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 364 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_prod,2); return T_DIV;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 365 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_multcrement,1); return T_UNION;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 366 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_multcrement,1); return T_UNION;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 367 "input_lexer.ll"
index_status(yyextra)=0; if (abs_calc_mode(yyextra)==38){return T_DOUBLE_DEUX_POINTS; } else {(*yylval)=gen(at_struct_dot,2); return T_COMPOSE;}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 368 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ampersand_times,2); return T_DIV;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 369 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_quote_pow,2); return T_POW;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 370 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointprod,2); return T_DIV;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 371 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_prod,2); return T_QUOTED_BINARY;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 372 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_division,2); return T_DIV;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 373 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_iquo,2); return T_DIV;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 374 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_irem,2); return T_DIV;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 375 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen("iquosto",0); return T_UNION;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 376 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen("iremsto",0); return T_UNION;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 377 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen("andsto",0); return T_UNION;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 378 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen("orsto",0); return T_UNION;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 379 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen("xorsto",0); return T_UNION;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 380 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_divcrement,1); return T_DIV;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 381 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_divcrement,1); return T_UNION;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 382 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointdivision,2); return T_DIV;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 383 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==3 || calc_mode(yyextra)==1) { (*yylval)=gen(at_pourcent); return T_FACTORIAL; } if (xcas_mode(yyextra)==1) { (*yylval)=symbolic(at_ans,vecteur(0)); return T_NUMBER; }  if (xcas_mode(yyextra) || python_compat(yyextra)) (*yylval)=gen(at_irem,2); else (*yylval)=0; return T_MOD;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 384 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==0){ (*yylval)=gen(at_iquorem,2); return T_MOD;} (*yylval)=symbolic(at_ans,-2); return T_NUMBER; 
	YY_BREAK
/* \xe2\x88\xa1             index_status(yyextra)=0; (*yylval)=gen(at_polar_complex,2); return T_MOD; */
case 189:
YY_RULE_SETUP
#line 386 "input_lexer.ll"
if (xcas_mode(yyextra)==0){ (*yylval)=gen(at_quorem,2); return T_MOD;} index_status(yyextra)=0; (*yylval)=symbolic(at_ans,-3); return T_NUMBER; 
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 387 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==3) { (*yylval)=gen(at_irem,2); return T_UNARY_OP; } else { if (xcas_mode(yyextra)) (*yylval)=gen(at_irem,2); else (*yylval)=0; return T_MOD; }
	YY_BREAK
/* "MOD"                   index_status(yyextra)=0; return T_MOD; */
case 191:
YY_RULE_SETUP
#line 389 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(python_compat(yyextra)==2?at_bitxor:at_pow,2); return T_POW;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 390 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_trn,1); return T_FACTORIAL;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 391 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_POW;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 392 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointpow,2); return T_POW;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 393 "input_lexer.ll"
(*yylval) = gen(at_Digits,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 394 "input_lexer.ll"
(*yylval) = gen(at_scientific_format,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 395 "input_lexer.ll"
(*yylval) = gen(at_angle_radian,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 396 "input_lexer.ll"
(*yylval) = gen(at_approx_mode,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 397 "input_lexer.ll"
(*yylval) = gen(at_all_trig_solutions,1); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 398 "input_lexer.ll"
(*yylval) = gen(at_complex_mode,1); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 399 "input_lexer.ll"
(*yylval) = gen(at_keep_algext,1); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 400 "input_lexer.ll"
(*yylval) = gen(at_complex_variables,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 401 "input_lexer.ll"
(*yylval) = gen(at_epsilon,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 402 "input_lexer.ll"
(*yylval) = gen(at_proba_epsilon,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 404 "input_lexer.ll"
(*yylval) = gen(at_randNorm,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 405 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_args,0); return T_QUOTED_BINARY;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 406 "input_lexer.ll"
(*yylval) = gen(at_at,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 407 "input_lexer.ll"
(*yylval) = gen(at_bloc,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 408 "input_lexer.ll"
if (xcas_mode(yyextra)==1 || xcas_mode(yyextra)==2) { (*yylval) = gen(at_function_diff,1); index_status(yyextra)=1; return T_UNARY_OP;} else { index_status(yyextra)=1; return find_or_make_symbol(yytext,(*yylval),yyscanner,true,yyextra); }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 409 "input_lexer.ll"
if (xcas_mode(yyextra)==1 || xcas_mode(yyextra)==2) { (*yylval)=e__IDNT_e; }else (*yylval)=symbolic(at_exp,1); index_status(yyextra)=1; return T_NUMBER;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 410 "input_lexer.ll"
(*yylval)=symbolic(at_exp,1); index_status(yyextra)=1; return T_NUMBER;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 411 "input_lexer.ll"
(*yylval) = gen(at_equal,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 412 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_throw,1); return T_RETURN;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 413 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_FOR;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 414 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_IF;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 415 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_IFTE;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 416 "input_lexer.ll"
(*yylval) = gen(at_ln,1); index_status(yyextra)=1; return T_UNARY_OP; /* index_status(yyextra)=1 to accept log[] for a basis log */
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 417 "input_lexer.ll"
(*yylval) = gen(at_not,1); if (xcas_mode(yyextra) || python_compat(yyextra)) return T_NOT;  index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 418 "input_lexer.ll"
(*yylval) = gen(at_not,1); return T_IN;  
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 419 "input_lexer.ll"
(*yylval) = gen(at_neg,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 420 "input_lexer.ll"
(*yylval) = gen(at_feuille,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 421 "input_lexer.ll"
(*yylval) = gen(at_feuille,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 422 "input_lexer.ll"
(*yylval)=2; index_status(yyextra)=0; return T_LOCAL;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 423 "input_lexer.ll"
{(*yylval) = gen(at_purge,1); index_status(yyextra)=0; return T_UNARY_OP;};
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 424 "input_lexer.ll"
(*yylval) = gen(at_for,1) ; index_status(yyextra)=0; return T_REPEAT;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 425 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 426 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 427 "input_lexer.ll"
(*yylval) = gen(at_restart,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 428 "input_lexer.ll"
(*yylval) = gen(at_same,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 429 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_subs,2); else (*yylval) = gen(at_subs,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 430 "input_lexer.ll"
(*yylval) = gen(at_VARS,0); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 431 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4);  if (xcas_mode(yyextra)!=0) return T_MUPMAP_WHILE; return T_WHILE;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 432 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_DO; /* must be here for DO ... END loop */
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 433 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_DO; /* must be here for DO ... END loop */
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 435 "input_lexer.ll"
index_status(yyextra)=0;(*yylval)=gen(at_diff); return T_UNARY_OP; 
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 436 "input_lexer.ll"
index_status(yyextra)=0;(*yylval)=gen(at_integrate); return T_UNARY_OP;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 437 "input_lexer.ll"
index_status(yyextra)=0;(*yylval)=gen(at_sum); return T_UNARY_OP;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 438 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 439 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_TEST_EQUAL;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 440 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 441 "input_lexer.ll"
index_status(yyextra)=0;(*yylval)=gen(at_product); return T_UNARY_OP; 
	YY_BREAK
/* numbers, also accept DMS e.g 1°15′27″13 */
case 242:
#line 444 "input_lexer.ll"
case 243:
#line 445 "input_lexer.ll"
case 244:
#line 446 "input_lexer.ll"
case 245:
#line 447 "input_lexer.ll"
case 246:
#line 448 "input_lexer.ll"
case 247:
#line 449 "input_lexer.ll"
case 248:
#line 450 "input_lexer.ll"
case 249:
#line 451 "input_lexer.ll"
case 250:
#line 452 "input_lexer.ll"
case 251:
#line 453 "input_lexer.ll"
case 252:
#line 454 "input_lexer.ll"
case 253:
#line 455 "input_lexer.ll"
case 254:
#line 456 "input_lexer.ll"
case 255:
#line 457 "input_lexer.ll"
case 256:
#line 458 "input_lexer.ll"
case 257:
#line 459 "input_lexer.ll"
case 258:
#line 460 "input_lexer.ll"
case 259:
#line 461 "input_lexer.ll"
case 260:
#line 462 "input_lexer.ll"
case 261:
#line 463 "input_lexer.ll"
case 262:
#line 464 "input_lexer.ll"
case 263:
#line 465 "input_lexer.ll"
case 264:
#line 466 "input_lexer.ll"
case 265:
#line 467 "input_lexer.ll"
case 266:
YY_RULE_SETUP
#line 467 "input_lexer.ll"
{ 
  index_status(yyextra)=1;
  int l=strlen(yytext);
  int interv=0; // set to non-zero if ? in the number
  int dot=-1;
  for (int i=0;i<l;++i){
    if (yytext[i]=='?'){
      interv=i; // mark ? position and remove it from the string
      for (;i<l;++i){
	yytext[i]=yytext[i+1];
      }
      --l;
      break;
    }
    if (yytext[i]=='.')
      dot=i;
  }
  // CERR << yytext << " " << interv << endl;
  if (dot>=0 && interv>1){
    --interv; // interv is the relative precision of the interval
    if (interv && dot>=1 && yytext[dot-1]=='0')
      --interv;
    ++dot;
    while (interv && dot<l && yytext[dot]=='0'){
      --interv; ++dot;
    }
  }
  char ch,ch2;
  if (l>2 && yytext[1]!='x' && (yytext[l-1]=='o' || yytext[l-1]=='b' || yytext[l-1]=='h') ){
    char base=yytext[l-1];
    for (int i=l-1;i>1;--i){
      yytext[i]=yytext[i-1];
    }
    if (base=='h')
      base='x';
    yytext[1]=base;
  }
  else {
    for (l=0;(ch=*(yytext+l));++l){
      if (ch=='x')
	break;
      if (ch=='e' || ch=='E'){
	if ( (ch2=*(yytext+l+1)) && (ch2=='e' || ch2=='E')){
	  ++l;
	  for (;(ch=*(yytext+l));++l)
	    *(yytext+l-1)=ch;
	  *(yytext+l-1)=0;
	  --l;
	}
      }
#ifndef BCD
      if ( (ch==-30 && *(yytext+l+1)==-128) || (ch==-62 && *(yytext+l+1)==-80) ){
	*yylval=0; return T_NUMBER;
      }
#endif
      if (ch==-30 && *(yytext+l+1)==-120 &&  *(yytext+l+2)==-110){
	l += 3;
	for (;(ch=*(yytext+l));++l)
	  *(yytext+l-2)=ch;
	*(yytext+l-2)=0;
	l -= 3;
	*(yytext+l)='-';
      }
    }
  }
  (*yylval) = chartab2gen(yytext,yyextra); 
  if (interv){
    double d=evalf_double(*yylval,1,context0)._DOUBLE_val;
    if (d<0 && interv>1)
      --interv;
    double tmp=std::floor(std::log(absdouble(d))/std::log(10.0));
    tmp=(std::pow(10.,1+tmp-interv));
    *yylval=eval(gen(makevecteur(d-tmp,d+tmp),_INTERVAL__VECT),1,context0);
  }
  return T_NUMBER; 
}
	YY_BREAK
/* symbols */
case 267:
#line 546 "input_lexer.ll"
case 268:
YY_RULE_SETUP
#line 546 "input_lexer.ll"
{
 index_status(yyextra)=1;
 int res=find_or_make_symbol(yytext,(*yylval),yyscanner,true,yyextra);
 if (res==T_NUMBER)
   *yylval=(*yylval)(string2gen(unlocalize(yytext),false),yyextra);
 return res;
} 
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 553 "input_lexer.ll"
if (!xcas_mode(yyextra) || xcas_mode(yyextra)==3) { 
  // CERR << "hash" << endl;
  (*yylval)=gen(at_hash,1); return TI_HASH; 
} else BEGIN(comment_hash);
	YY_BREAK
case 270:
/* rule 270 can match eol */
YY_RULE_SETUP
#line 557 "input_lexer.ll"
BEGIN(INITIAL); index_status(yyextra)=0; increment_lexer_line_number_setcol(yyscanner,yyextra);  /* comment_s(yyextra)=string(yytext); (*yylval)=string2gen(comment_s(yyextra).substr(0,comment_s(yyextra).size()-1),false); return T_COMMENT; */
	YY_BREAK
/* everything else */
case 271:
YY_RULE_SETUP
#line 559 "input_lexer.ll"
(*yylval)=string2gen(string(yytext),false); return T_STRING;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 561 "input_lexer.ll"
ECHO;
	YY_BREAK
#line 2882 "input_lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(comment_hash):
case YY_STATE_EOF(str):
case YY_STATE_EOF(backquote):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * giac_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( giac_yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of giac_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					giac_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			giac_yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) giac_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 739 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 739 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
	yy_is_jam = (yy_current_state == 738);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					giac_yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( giac_yywrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void giac_yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        giac_yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	giac_yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	giac_yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void giac_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		giac_yypop_buffer_state();
	 *		giac_yypush_buffer_state(new_buffer);
     */
	giac_yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	giac_yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (giac_yywrap()) processing, but the only time this flag
	 * is looked at is after giac_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void giac_yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE giac_yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) giac_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) giac_yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	giac_yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with giac_yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void giac_yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		giac_yyfree((void *) b->yy_ch_buf ,yyscanner );

	giac_yyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a giac_yyrestart() or at EOF.
 */
    static void giac_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	giac_yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then giac_yy_init_buffer was _probably_
     * called from giac_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( 0 ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void giac_yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		giac_yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void giac_yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	giac_yyensure_buffer_stack(yyscanner);

	/* This block is copied from giac_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from giac_yy_switch_to_buffer. */
	giac_yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void giac_yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	giac_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		giac_yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void giac_yyensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)giac_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in giac_yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)giac_yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in giac_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE giac_yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) giac_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	giac_yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to giac_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       giac_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE giac_yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return giac_yy_scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to giac_yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE giac_yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) giac_yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = giac_yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in giac_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	//struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	//(void)yyg;
	//(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE giac_yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int giac_yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int giac_yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *giac_yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *giac_yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int giac_yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *giac_yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void giac_yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void giac_yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "giac_yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void giac_yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "giac_yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see giac_yy_switch_to_buffer
 */
void giac_yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void giac_yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int giac_yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void giac_yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * giac_yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void giac_yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* giac_yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int giac_yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) giac_yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
      errno = EINVAL;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* giac_yylex_init_extra has the same functionality as giac_yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to giac_yyalloc in
 * the yyextra field.
 */

int giac_yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    giac_yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) giac_yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
      errno = EINVAL; //ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    giac_yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from giac_yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * giac_yylex_init()
     */
    return 0;
}

/* giac_yylex_destroy is for both reentrant and non-reentrant scanners. */
int giac_yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		giac_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		giac_yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	giac_yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        giac_yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * giac_yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    giac_yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *giac_yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *giac_yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void giac_yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see giac_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 561 "input_lexer.ll"



/*
 *  Routines
 */
#ifndef NO_NAMESPACE_GIAC
  namespace giac {
#endif // ndef NO_NAMESPACE_GIAC
    // Set the input string
    // export GIAC_DEBUG=-2 to renew static_lexer.h/static_extern.h
    YY_BUFFER_STATE set_lexer_string(const std::string &s_orig,yyscan_t & scanner,GIAC_CONTEXT,int maxsize){
      dbg_printf("lex begin %s\n",s_orig.c_str());
      string lexer_string;
      giac_yylex_init(&scanner);
      giac_yyset_extra(contextptr,scanner);
      index_status(contextptr)=0;
      opened_quote(contextptr)=0;
      in_rpn(contextptr)=0;
      lexer_line_number(contextptr)=1;
      first_error_line(contextptr)=0;
      spread_formula(contextptr)=0;
      if (s_orig.size()>=(maxsize?maxsize:3000)){
	//giac_yyerror(scanner,s.c_str());
	confirm("Parse_string_too_long","",true);
	YY_BUFFER_STATE state=giac_yy_scan_string("1",scanner);
	return state;
      }
      {
	string s; s.reserve(s_orig.size()+128);
	s=s_orig;
#if defined NSPIRE // || defined FXCG
        for (unsigned i=0;i<s.size()-1;++i){
          if (s[i]==']' && s[i+1]=='['){
            string tmp=s.substr(0,i+1)+string(",");
            s=tmp+s.substr(i+1,s.size()-i-1);
          }
        }
#endif
        bool instring=false;
        // stupid match of bracket then parenthesis
        int l=s.size(),nb=0,np=0;
        int i=0;
        if (lexer_close_parenthesis(contextptr)){
          for (;i<l;++i){
            if (!instring && i && s[i]=='/' && s[i-1]=='/'){
              // skip comment until end of line
              for (;i<l;++i){
                if (s[i]==13)
                  break;
              }
              continue;
            }
            if (!instring && i>=2 && ( (s[i-2]=='-' && s[i-1]=='-') || (s[i-2]=='+' && s[i-1]=='+') ) && (s[i]=='.'|| (s[i]>='0' && s[i]<='9')) ){
              s[i-2]='+';
              s[i-1]=' ';
            }
            if (!instring && i>=5 && s[i-5]=='(' && s[i-4]=='N' && s[i-3]=='U' && s[i-2]=='L' && s[i-1]=='L' ){
              s[i-4]=s[i-3]=s[i-2]=s[i-1]=' ';
            }
            if (!instring && i && s[i]=='*' && s[i-1]=='/'){
              // skip comment 
              for (;i<l;++i){
                if (s[i]=='/' && s[i-1]=='*')
                  break;
              }
              if (i==l){
                s = s.substr(0,l-1)+"*/"+s[l-1];
                CERR << "unfinished comment, adding */" << "\n" << s << "\n";
              }
              continue;
            }
            if (!instring && s[i]==92){
              i += 2;
              if (i>=l)
                break;
            }
            if (instring){
              if (s[i]=='"'&& (i==0 || s[i-1]!='\\'))
                instring=false;
            }
            else {
              switch (s[i]){
              case '"':
                instring=i==0 || s[i-1]!='\\';
                break;
              case '(':
                ++np;
                break;
              case ')':
                --np;
                break;
              case '[':
                ++nb;
                break;
              case ']':
                --nb;
                break;
              }
            }
          }
          if (nb<0)
            *logptr(contextptr) << "Too many ]" << "\n";
          if (np<0)
            *logptr(contextptr) << "Too many )" << "\n";
          while (np<0 && i>=0 && s[i-1]==')'){
            --i;
            ++np;
          }
          while (nb<0 && i>=0 && s[i-1]==']'){
            --i;
            ++nb;
          }
          s=s.substr(0,i);
          if (nb>0){
            *logptr(contextptr) << "Warning adding " << nb << " ] at end of input" << "\n";
            s += string(nb,']');
          }
          if (np>0){
            *logptr(contextptr) << "Warning adding " << np << " ) at end of input" << "\n";
            s += string(np,')');
          }
        }
        l=s.size();
        for (;l;l--){
          if (s[l-1]!=' ')
            break;
        }
        // strings ending with :;
        while (l>=4 && s[l-1]==';' && s[l-2]==':'){
          // skip spaces before :;
          int m;
          for (m=l-3;m>0;--m){
            if (s[m]!=' ')
              break;
          }
          if (m<=1 || s[m]!=';')
            break;
          if (s[m-1]==':')
            l = m+1;
          else {
            s[m]=':';
            s[m+1]=';';
            l=m+2;
          }
        }
        s=s.substr(0,l);
        /* if (l && ( (s[l-1]==';') || (s[l-1]==':')))
           l--; */
        string ss;
        ss.reserve(s.size()*1.1);
        for (int i=0;i<l;++i){
          if (s[i]=='\\' && s[i+1]=='\n'){
            ++i;
            continue;
          }
          if (i && s[i]=='_' && (s[i-1]=='.' || (s[i-1]>='0' && s[i-1]<='9'))){
            ss += " unit "; // _ does not work
            continue;
          }       
          if (i>2 && s[i]=='_' && ((s[i-3]=='=' && s[i-2]=='>' && s[i-1]==' ') || (s[i-2]=='=' && s[i-1]>='>'))){
            ss += " unit_"; 
            continue;
          }       
          if (i && (unsigned char)s[i]==0xc2 && (unsigned char)s[i+1]!=0xb0)
            ss += ' ';
          if ( (unsigned char)s[i]==0xef && i<l-3 ){
            if ((unsigned char)s[i+1]==0x80 && (unsigned char)s[i+2]==0x80 ){  
              ss+='e';
              i+=2;
              continue;
            }
          }
          if ( (unsigned char)s[i]==0xe2 && i<l-3 ){
            if ((unsigned char)s[i+1]==134 && (unsigned char)s[i+2]==146){
              // 0xe2 0x86 0x92
              ss += ' ';
              ss += s[i];
              ++i;
              ss += s[i];
              ++i;
              ss += s[i];
              ss += ' ';
              continue;
            }
            if ((unsigned char)s[i+1]==0x89){ 
              ss += ' ';
              ss += s[i];
              ++i;
              ss += s[i];
              ++i;
              ss += s[i];
              ss += ' ';
              continue;
            } // 0xe2 0x89	  
            if ((unsigned char)s[i+1]==0x88){ 
              // mathop, add blank before and after except following an e/E 
              if ((unsigned char) s[i+2]==0x91){ // sigma
                ss += " SIGMA";
                i +=2;
                continue;
              }
              if ((unsigned char) s[i+2]==0x86){ // delta
                ss += " DELTA";
                i +=2;
                continue;
              }
              if ((unsigned char) s[i+2]==0x8f){ // pi
                ss += " PI";
                i +=2;
                continue;
              }
              if ( i>1 && (s[i-1]=='e' || s[i-1]=='E')){
                ss +='-';
                i +=2;
                continue;
              }
              if (i>2  && (s[i-1]==' ' && (s[i-2]=='e' || s[i-2]=='E')) ){
                ss[ss.size()-1] = '-';
                i += 3;
                continue;
              }
              ss += ' ';
              ss += s[i];
              ++i;
              ss += s[i];
              ++i;
              ss += s[i];
              ss += ' ';
              continue;
            } // 0xe2 0x88
            if ((unsigned char)s[i+1]==0x96 && ((unsigned char)s[i+2]==0xba || (unsigned char)s[i+2]==182 )){  
              // sto 
              ss += s[i];
              ++i;
              ss += s[i];
              ++i;
              ss += s[i];
              ss += ' ';
              continue;
            } // 0xe2 0x96
            if ((unsigned char)s[i+1]==0x86 && (unsigned char)s[i+2]==0x92){  
              // sto 
              ss += s[i];
              ++i;
              ss += s[i];
              ++i;
              ss += s[i];
              ss += ' ';
              continue;
            } // 0xe2 0x96
          } //end if s[i]=0xe2
          if (s[i]=='.'){
            if ( i && (i<l-1) && (s[i-1]!=' ') && (s[i+1]=='.') ){
              ss+= " ..";
              ++i;
            }
            else
              ss+='.';
          }
          else {
            if (xcas_mode(contextptr) > 0 && xcas_mode(contextptr) !=3){
              if (s[i]=='#')
                ss += "//";
              else
                ss += s[i];
            }
            else
              ss+=s[i];
          }
        }
        // ofstream of("log"); of << s << "\n" << ss << "\n"; of.close();
        if (debug_infolevel>2)
          CERR << "lexer " << ss << "\n";
        s.clear();
        ss += " \n ÿ";
        if (ss.size()>=4096)
          ss ="Parse_string_too_long";
        lexer_string=ss;
      }
      currently_scanned(contextptr)=lexer_string.c_str();
      dbg_printf("lex %s\n",lexer_string.c_str());
      YY_BUFFER_STATE state=giac_yy_scan_string(lexer_string,scanner);
      dbg_printf("lex done\n");
      return state;
    }

    int delete_lexer_string(YY_BUFFER_STATE & state,yyscan_t & scanner){
      giac_yy_delete_buffer(state,scanner);
      giac_yylex_destroy(scanner);
      return 1;
    }

#if 0 //def STATIC_BUILTIN_LEXER_FUNCTIONS
    bool CasIsBuildInFunction(char const *s, gen &g){ 
      // binary search in builtin_lexer_functions
      int i=0, j=builtin_lexer_functions_number-1;
      int cmp;
      cmp= strcmp(s,builtin_lexer_functions[i].s);
      if (cmp==0) goto found; if (cmp<0) return false;
      cmp= strcmp(s,builtin_lexer_functions[j].s);
      if (cmp==0) { i=j; goto found; } if (cmp>0) return false;
      while (1){
        if (i+1>=j) return false;
        int mid= (i+j)/2;
        cmp= strcmp(s,builtin_lexer_functions[mid].s);
        if (cmp==0) { i=mid; goto found; } 
        if (cmp>0) i= mid; else j=mid;
      }
    found:
#if defined NSPIRE 
      g= gen(int((*builtin_lexer_functions_())[i]+builtin_lexer_functions[i]._FUNC_));
#else
      g= gen(int(builtin_lexer_functions_[i]+builtin_lexer_functions[i]._FUNC_));
#endif
      g= gen(*g._FUNCptr);
      return true;
    }
#endif

#ifndef NO_NAMESPACE_GIAC
  } // namespace giac
#endif // ndef NO_NAMESPACE_GIAC
  

